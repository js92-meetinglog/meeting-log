name: Spring Boot CI/CD to AWS EC2

# 1. 트리거: 'main' 브랜치에 Push가 발생하면 실행
on:
  push:
    branches: [ "main" ]

jobs:
  # --------------------
  # 1. CI (빌드) 작업
  # --------------------
  build:
    runs-on: ubuntu-latest # 빌드 환경
    
    steps:
      # (1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # (3) Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # (4) Gradle로 빌드 (이때 application-local.properties는 사용되지 않음)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # (5) 빌드된 .jar 파일을 'artifact'로 패키징
      #     (다음 deploy 작업에서 사용하기 위해)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar # 아티팩트 이름
          path: build/libs/*.jar # 빌드된 jar 파일 경로

  # --------------------
  # 2. CD (배포) 작업
  # --------------------
  deploy:
    needs: build # 'build' 작업이 성공해야만 실행됨
    runs-on: ubuntu-latest
    
    steps:
      # (1) 'build' 작업에서 만든 'app-jar' 아티팩트 다운로드
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs # 다운로드 받을 경로

      # (2) EC2 서버로 .jar 파일 전송 (SCP)
      - name: SCP to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "build/libs/*.jar"   # (1)에서 다운로드한 .jar 파일
          target: "/home/ubuntu/app"    # (2단계)에서 EC2에 만들어둔 디렉터리


        # (3) EC2 서버에 접속(SSH)하여 배포 스크립트 실행
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}

          # --------------------------------------------------- #
          # (중요) 이 'script:' 블록 전체를 아래 내용으로 교체하세요
          # --------------------------------------------------- #
          script: |
            # (중요!) 오류가 발생해도 스크립트가 중단되지 않도록 설정
            set +e
            
            echo "--- 1. 배포 스크립트 시작 ---"
            APP_DIR="/home/ubuntu/app"
            cd $APP_DIR
            
            echo "--- 2. 새 .jar 파일 이름 찾기 (plain.jar 제외) ---"
            # find로 .jar를 찾되, grep -v 'plain'으로 plain.jar를 제외함
            JAR_FILE=$(find . -name "*.jar" | grep -v 'plain' | head -n 1)
            
            if [ -z "$JAR_FILE" ]; then
              echo "오류: 실행 가능한 .jar 파일을 찾을 수 없습니다."
              exit 1
            fi
            echo "배포할 파일: $JAR_FILE"
            
            echo "--- 3. 기존 프로세스 종료 (pkill) ---"
            # -f: 이름으로 찾기. 'java -jar'가 포함된 모든 프로세스를 찾음
            # '|| true' : pkill이 프로세스를 못 찾거나(종료코드 1) 종료시켜도(종료코드 0) 에러 내지 않음
            pkill -15 -f "java -jar" || true
            echo "기존 서버 종료(pkill -15) 명령 전송 완료. 10초 대기."
            sleep 10
            
            # (백업 강제 종료)
            echo "--- 4. (백업) 강제 종료 (pkill -9) ---"
            pkill -9 -f "java -jar" || true
            sleep 2
            
            # (중요!) 여기서부터는 다시 오류 시 중단 모드로 변경
            set -e
            
            echo "--- 5. 환경 변수(Secrets) 주입 ---"
            export DB_URL=${{ secrets.DB_URL }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            echo "--- 6. 새 서버 시작 ---"
            nohup java -jar $JAR_FILE > $APP_DIR/server.log 2>&1 &
            
            echo "--- 7. 배포 스크립트 완료 ---"