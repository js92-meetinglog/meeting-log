name: Spring Boot CI/CD to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: |
            build/libs/*.jar
            docker-compose.yml

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact
          path: .

      - name: List files (for debugging)
        run: ls -R

      - name: SCP to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "build/libs/*.jar,docker-compose.yml"
          target: "/home/ubuntu/app"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            set -euxo pipefail
            echo "--- 배포 시작 ---"
            APP_DIR="/home/ubuntu/app"
            cd "$APP_DIR"
            
            # =========================================================
            # ▼ [수정] Docker 및 Docker Compose 공식 리포지토리로 설치
            # =========================================================
            echo "--- Docker 및 Docker Compose 설치 확인 및 설치 ---"
            if ! command -v docker &> /dev/null; then
              echo "Docker가 없으므로 공식 리포지토리로 설치합니다."
              # 1. (선택) 기존 구버전 삭제
              sudo apt-get remove docker docker-engine docker.io containerd runc || true
            
              # 2. 리포지토리 설정
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
              # 3. Docker Engine 및 Compose Plugin 설치
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker가 이미 설치되어 있습니다."
            fi
            
            # =========================================================
            
            # ------------------ .env 파일 생성 ------------------
            echo "ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" > .env
            
            # ------------------ Elasticsearch/Kibana 시작 ------------------
            echo "--- Docker Compose 빌드 및 시작 ---"
            # [수정] 하이픈 제거: 'docker-compose' -> 'docker compose'
            sudo docker compose up -d --build
            
            echo "Elasticsearch 컨테이너 시작 대기..."
            sleep 30
            
            # Nori 플러그인 설치
            # [수정] 'sudo' 추가
            sudo docker exec es-container /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-nori || true
            # [수정] 하이픈 제거: 'docker-compose' -> 'docker compose'
            sudo docker compose restart elasticsearch
            
            # ------------------ Spring Boot 배포 ------------------
            JAR_FILE=$(ls build/libs/*.jar 2>/dev/null | grep -v 'plain' | head -n 1 || true)
            if [ -z "$JAR_FILE" ]; then
              echo "오류: 실행 가능한 .jar 파일을 찾을 수 없습니다."
              exit 1
            fi
            
            JAR_NAME=$(basename "$JAR_FILE")
            PID=$(pgrep -f "$JAR_NAME" || true)
            if [ -n "$PID" ]; then
              kill -15 $PID || true
              sleep 10
              kill -9 $PID || true
            fi
            
            nohup /usr/bin/java \
              -Dspring.datasource.url='${{ secrets.DB_URL }}' \
              -Dspring.datasource.username='${{ secrets.DB_USERNAME }}' \
              -Dspring.datasource.password='${{ secrets.DB_PASSWORD }}' \
              -Dspring.data.elasticsearch.username=elastic \
              -Dspring.data.elasticsearch.password='${{ secrets.ELASTIC_PASSWORD }}' \
              -jar "$JAR_FILE" > $APP_DIR/server.log 2>&1 &
            disown
            
            echo "--- 배포 완료 ---"
            
