name: Spring Boot CI/CD to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: |
            build/libs/*.jar
            docker-compose.yml

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact
          path: .

      - name: List files (for debugging)
        run: ls -R

      - name: SCP to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "build/libs/*.jar,docker-compose.yml"
          target: "/home/ubuntu/app"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            set -euxo pipefail
            echo "--- 배포 시작 ---"
            APP_DIR="/home/ubuntu/app"
            cd "$APP_DIR"

            # ------------------ Docker 설치 ------------------
            echo "--- Docker 설치 확인 및 설치 ---"
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # ------------------ Docker Compose 설치 ------------------
            echo "--- Docker Compose 설치 확인 및 설치 ---"
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            docker-compose version || true

            # ------------------ .env 파일 생성 ------------------
            echo "ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" > .env

            # ------------------ Docker 캐시 정리 ------------------
            echo "--- Docker 캐시 정리 ---"
            sudo docker system prune -a -f --volumes || true

            # ------------------ Elasticsearch/Kibana 시작 ------------------
            echo "--- Docker Compose 빌드 ---"
            sudo docker-compose up -d --build

            echo "Elasticsearch 컨테이너 시작 대기..."
            sleep 30

            # Nori 플러그인 설치
            sudo docker exec es-container /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-nori || true
            sudo docker-compose restart elasticsearch

            # ------------------ Spring Boot 배포 ------------------
            JAR_FILE=$(ls build/libs/*.jar 2>/dev/null | grep -v 'plain' | head -n 1 || true)
            if [ -z "$JAR_FILE" ]; then
              echo "오류: 실행 가능한 .jar 파일을 찾을 수 없습니다."
              exit 1
            fi

            JAR_NAME=$(basename "$JAR_FILE")
            PID=$(pgrep -f "$JAR_NAME" || true)
            if [ -n "$PID" ]; then
              kill -15 $PID || true
              sleep 10
              kill -9 $PID || true
            fi

            nohup /usr/bin/java \
              -Dspring.datasource.url='${{ secrets.DB_URL }}' \
              -Dspring.datasource.username='${{ secrets.DB_USERNAME }}' \
              -Dspring.datasource.password='${{ secrets.DB_PASSWORD }}' \
              -Dspring.data.elasticsearch.username=elastic \
              -Dspring.data.elasticsearch.password='${{ secrets.ELASTIC_PASSWORD }}' \
              -jar "$JAR_FILE" > $APP_DIR/server.log 2>&1 &
            disown

            echo "--- 배포 완료 ---"
