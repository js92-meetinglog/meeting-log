name: Spring Boot CI/CD to AWS EC2

# 1. 트리거: 'main' 브랜치에 Push가 발생하면 실행
on:
  push:
    branches: [ "main" ]

jobs:
  # --------------------
  # 1. CI (빌드) 작업
  # --------------------
  build:
    runs-on: ubuntu-latest # 빌드 환경
    
    steps:
      # (1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # (3) Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # (4) Gradle로 빌드 (이때 application-local.properties는 사용되지 않음)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # (5) 빌드된 .jar 파일을 'artifact'로 패키징
      #     (다음 deploy 작업에서 사용하기 위해)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar # 아티팩트 이름
          path: build/libs/*.jar # 빌드된 jar 파일 경로

  # --------------------
  # 2. CD (배포) 작업
  # --------------------
  deploy:
    needs: build # 'build' 작업이 성공해야만 실행됨
    runs-on: ubuntu-latest
    
    steps:
      # (1) 'build' 작업에서 만든 'app-jar' 아티팩트 다운로드
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs # 다운로드 받을 경로

      # (2) EC2 서버로 .jar 파일 전송 (SCP)
      - name: SCP to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "build/libs/*.jar"   # (1)에서 다운로드한 .jar 파일
          target: "/home/ubuntu/app"    # (2단계)에서 EC2에 만들어둔 디렉터리


        # (3) EC2 서버에 접속(SSH)하여 배포 스크립트 실행
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}

          # --------------------------------------------------- #
          # (중요) 이 'script:' 블록 전체를 아래 내용으로 교체하세요
          # --------------------------------------------------- #
          script: |
            set -euxo pipefail
            echo "--- 배포 시작 ---"
            APP_DIR="/home/ubuntu/app"
            cd "$APP_DIR"

            echo "--- 새 .jar 찾기 (plain 제외) ---"
            JAR_FILE=$(ls build/libs/*.jar 2>/dev/null | grep -v 'plain' | head -n 1 || true)
            if [ -z "$JAR_FILE" ]; then
              echo "오류: 실행 가능한 .jar 파일을 찾을 수 없습니다."
              exit 1
            fi
            echo "배포할 파일: $JAR_FILE"

            echo "--- 기존 프로세스 PID 조회 (JAR 파일명 기준) ---"
            # JAR 파일명만 추출
            JAR_NAME=$(basename "$JAR_FILE")
            PID=$(pgrep -f "$JAR_NAME" || true)
            echo "찾은 PID: ${PID:-none}"

            if [ -n "$PID" ]; then
              echo "SIGTERM 보내기..."
              kill -15 $PID || true
              sleep 10
              echo "강제 종료(SIGKILL) 시도..."
              kill -9 $PID || true
            fi

            echo "--- 환경변수 주입 ---"
            # secrets는 워크플로 YAML에서 미리 치환됩니다. (필요 시 작은따옴표로 감싸 안전하게)
            export DB_URL='${{ secrets.DB_URL }}'
            export DB_USERNAME='${{ secrets.DB_USERNAME }}'
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            echo "환경변수 설정 완료"

            echo "--- 새 서버 시작 ---"
            # 절대 경로로 java 사용, nohup + disown로 세션에 영향 주지 않음
            nohup /usr/bin/java -jar "$JAR_FILE" > $APP_DIR/server.log 2>&1 &
            disown
            echo "서버 시작 명령 전송 완료. 로그: $APP_DIR/server.log"
            echo "--- 배포 완료 ---"
